require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');

// Configuration
const { TOKEN, SERVER_URL, PORT } = process.env;
const TELEGRAM_API = `https://api.telegram.org/bot${TOKEN}`;
const URI = `/webhook/${TOKEN}`;
const WEBHOOK_URL = SERVER_URL + URI;

// Initialize Express app
const app = express();
app.use(bodyParser.json());

// Initialize Telegram Bot
const bot = new TelegramBot(TOKEN, { 
  polling: true,
  request: {
    proxy: process.env.PROXY || null
  }
});

// Menu
const replyKeyboard = {
  reply_markup: {
    keyboard: [
      ['üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏', 'üõ† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'],
      ['üèó –ü—Ä–æ–µ–∫—Ç—ã', 'üìç –û—Ñ–∏—Å—ã –Ω–∞ –∫–∞—Ä—Ç–µ'],
      ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

// Map
const offices = [
  {
    title: "–ì–æ–ª–æ–≤–Ω–æ–π –æ—Ñ–∏—Å ANTARES ENGINEERING",
    address: "—É–ª. –ö–∞—Ä–∞—Å–∞–π –±–∞—Ç—ã—Ä–∞ 1–ê, –ê–ª–º–∞—Ç—ã",
    lat: 43.238949,
    lng: 76.889709
  }
];

// Keyboard Markups 
const mainMenuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏', callback_data: 'about' }],
      [{ text: 'üõ† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', callback_data: 'specialization' }],
      [{ text: 'üèó –ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã', callback_data: 'projects' }],
      [{ text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contact' }]
    ]
  }
};

const backToMainMenuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
    ]
  }
};

// Bot responses (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const responses = {
  start: `üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ANTARES ENGINEERING!</b> üåü

–Ø —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –∫–æ–º–∞–Ω–¥–µ –≤–µ–¥—É—â–µ–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞!

–ù–∞—à–∞ –º–∏—Å—Å–∏—è ‚Äî —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–µ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—â–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.`,

  about: `üè¢ <b>–û –∫–æ–º–ø–∞–Ω–∏–∏ ANTARES ENGINEERING</b>

–¢–û–û "ANTARES ENGINEERING" - —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å –±–æ–ª–µ–µ —á–µ–º 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã.

üîπ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
üîπ –í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
üîπ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—ã—Å–æ—á–∞–π—à–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞
üîπ –ù–∞–¥–µ–∂–Ω—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

–ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∏–º - –º—ã —Å–æ–∑–¥–∞–µ–º –±—É–¥—É—â–µ–µ!`,

  specialization: `üìå <b>–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:</b>

‚Ä¢ –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
‚Ä¢ –°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏
‚Ä¢ –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ç–µ–π
‚Ä¢ –î–∏—Å—Ç—Ä–∏–±—å—é—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–≤—è–∑–∏
‚Ä¢ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
‚Ä¢ –†–µ–º–æ–Ω—Ç–Ω—ã–µ –∏ –º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ- –∏ —Ç–µ–ø–ª–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ (–í–ò–≠)`,
  
  projects: `üèó <b>–ù–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:</b>

‚Ä¢ <b>SMART NATIONAL PARK BURABAY</b> - –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–Ω–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–µ—Å–Ω—ã—Ö –ø–æ–∂–∞—Ä–æ–≤
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–∂–∞—Ä–æ–≤ –≤ –ê–ª–º–∞—Ç—ã (–ú–µ–¥–µ–æ, –®—ã–º–±—É–ª–∞–∫)
‚Ä¢ <b>–ì–õ–ü–† –ï–†–¢I–° –û–†–ú–ê–ù–´</b> - —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è (277 961 –≥–∞)
‚Ä¢ <b>BEELINE, ALTEL TELE2</b> - —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Å–µ—Ç–µ–π —Å–≤—è–∑–∏
‚Ä¢ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç —à–∫–æ–ª –∏ —Å–ø–æ—Ä—Ç–ø–ª–æ—â–∞–¥–æ–∫
‚Ä¢ <b>–ö–∞–∑–ù–¢–£ –∏–º. –°–∞—Ç–ø–∞–µ–≤–∞</b> - —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è (254 –∫–∞–º–µ—Ä—ã)`,
  
  contact: `üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>

<b>–¢–µ–ª–µ—Ñ–æ–Ω—ã:</b>
+7 (727) 339 30 87
+7 (747) 505 37 77
+7 (777) 777 07 44

<b>Email:</b> antares.engineering@bk.ru

<b>–ê–¥—Ä–µ—Å:</b>
050012, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –≥. –ê–ª–º–∞—Ç—ã,
—É–ª. –ö–∞—Ä–∞—Å–∞–π –±–∞—Ç—ã—Ä–∞ 1–ê

üìç <a href="https://maps.google.com">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>`
};

// Initialize webhook
const initWebhook = async () => {
  try {
    const res = await axios.get(`${TELEGRAM_API}/setWebhook?url=${WEBHOOK_URL}`);
    console.log('Webhook setup:', res.data);
  } catch (error) {
    console.error('Error setting up webhook:', error.message);
  }
};

// Webhook handler
app.post(URI, async (req, res) => {
  try {
    console.log('Received update:', req.body);
    res.send();
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(500).send();
  }
});

// Handle /start command (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å replyKeyboard)
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, responses.start, {
    parse_mode: 'HTML',
    reply_markup: replyKeyboard.reply_markup
  });
});

// Handle callback queries (button presses) - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;

  switch(query.data) {
    case 'main_menu':
      bot.editMessageText(responses.start, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: mainMenuKeyboard.reply_markup
      });
      break;
      
    case 'about':
      bot.editMessageText(responses.about, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: backToMainMenuKeyboard.reply_markup
      });
      break;
      
    case 'specialization':
      bot.editMessageText(responses.specialization, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: backToMainMenuKeyboard.reply_markup
      });
      break;
      
    case 'projects':
      bot.editMessageText(responses.projects, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: backToMainMenuKeyboard.reply_markup
      });
      break;
      
    case 'contact':
      bot.editMessageText(responses.contact, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        reply_markup: backToMainMenuKeyboard.reply_markup
      });
      break;
  }
  
  bot.answerCallbackQuery(query.id);
});

// Handle reply keyboard buttons (–ù–û–í–û–ï: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞)
bot.on('message', (msg) => {
  const text = msg.text;
  
  if (text.startsWith('/')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã

  switch(text) {
    case 'üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏':
      bot.sendMessage(msg.chat.id, responses.about, {
        parse_mode: 'HTML',
        reply_markup: replyKeyboard.reply_markup
      });
      break;
      
    case 'üõ† –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏':
      bot.sendMessage(msg.chat.id, responses.specialization, {
        parse_mode: 'HTML',
        reply_markup: replyKeyboard.reply_markup
      });
      break;
      
    case 'üèó –ü—Ä–æ–µ–∫—Ç—ã':
      bot.sendMessage(msg.chat.id, responses.projects, {
        parse_mode: 'HTML',
        reply_markup: replyKeyboard.reply_markup
      });
      break;
      
    case 'üìç –û—Ñ–∏—Å—ã –Ω–∞ –∫–∞—Ä—Ç–µ':
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –æ—Ñ–∏—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ (–ù–û–í–û–ï)
      offices.forEach(office => {
        bot.sendVenue(
          msg.chat.id,
          office.lat,
          office.lng,
          office.title,
          office.address
        );
      });
      break;
      
    case 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
      bot.sendMessage(msg.chat.id, responses.contact, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        reply_markup: replyKeyboard.reply_markup
      });
      break;
      
    default:
      if (!msg.text.startsWith('/')) {
        bot.sendMessage(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', {
          reply_markup: replyKeyboard.reply_markup
        });
      }
  }
});

// Error handling
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

// Start server
app.listen(PORT || 5000, async () => {
  console.log(`üöÄ Server running on port ${PORT || 5000}`);
  await initWebhook();
});